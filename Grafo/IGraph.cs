using System.Collections.Generic;
using CE.Graph.Edges;
using CE.Graph.Rutas;

namespace CE.Graph.Grafo
{
	/// <summary>
	/// Un grafo en el que se pueden leer y escribir nodos y aristas
	/// </summary>
	public interface IGraph<T>
	{
		/// <summary>
		/// Gets the edge bewteen two nodex.
		/// </summary>
		IEdge<T> this[T desde, T hasta] { get; }

		/// <summary>
		/// Nodes collection.
		/// </summary>
		IEnumerable<T> Nodes { get; }

		/// <summary>
		/// Gets the node count.
		/// </summary>
		int NodeCount { get; }

		/// <summary>
		/// Gets the edge count.
		/// </summary>
		int EdgeCount ();

		/// <summary>
		/// Clears the entire graph.
		/// </summary>
		void Clear ();

		/// <summary>
		/// Gets the existing edges.
		/// </summary>
		IEnumerable<IEdge<T>> Edges ();

		/// <summary>
		/// Gets the neighborhood of a node.
		/// </summary>
		ICollection<T> Neighborhood (T node);

		/// <summary>
		/// Converts a sequence of nodes into a path.
		/// </summary>
		IPath<T> ToPath (IEnumerable<T> seq);

		/// <summary>
		/// Gets the subgraph generated by a collection of nodes
		/// </summary>
		IGraph<T> Subgraph (IEnumerable<T> nodeSubset);
	}
}