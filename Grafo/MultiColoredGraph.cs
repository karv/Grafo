using System;
using System.Collections.Generic;
using System.Linq;
using CE.Graph.Rutas;
using CE.Graph.Edges;

namespace CE.Graph.Grafo
{
	/// <summary>
	/// A multicolored graph
	/// </summary>
	public class MultiColoredGraph<TNode, TColor> : IGraph<TNode>
	{
		/// <summary>
		/// Devuelve los nodos de la gráfica
		/// </summary>
		/// <value>The nodos.</value>
		public IReadOnlyCollection<TNode> Nodes
		{
			get
			{
				var ret = new List<TNode> ();
				foreach (var x in _colorAssign)
				{
					foreach (var nod in x.Value.Nodes)
					{
						if (!ret.Contains (nod))
							ret.Add (nod);
					}
				}
				return ret.AsReadOnly ();
			}
		}

		IEdge<TNode> IGraph<TNode>.this[TNode desde, TNode hasta] => throw new NotImplementedException ();
		IEnumerable<TNode> IGraph<TNode>.Nodes => Nodes;

		int IGraph<TNode>.NodeCount => Nodes.Count;
		/// <summary>
		/// Gets the neighborhood of a specified node (any color).
		/// </summary>
		public ICollection<TNode> Neighborhood (TNode node)
		{
			ISet<TNode> ret = new HashSet<TNode> ();

			foreach (var color in _colorAssign.Keys)
			{
				ret.UnionWith (_colorAssign[color].Neighborhood (node));
			}
			return ret;
		}

		/// <summary>
		/// Gets the subgraph generated by a collection of nodes.
		/// </summary>
		public IGraph<TNode> Subgraph (IEnumerable<TNode> conjunto)
		{
			throw new NotImplementedException ();
		}

		/// <summary>
		/// Converts a sequence of nodes into a path.
		/// </summary>
		public IPath<TNode> ToPath (IEnumerable<TNode> seq) => throw new NotImplementedException ();

		/// <summary>
		/// Removes all nodes and edges.
		/// </summary>
		public void Clear () => _colorAssign.Clear ();

		/// <summary>
		/// Gets the colors of a specified edge.
		/// </summary>
		public IEnumerable<TColor> EdgeColors (IEdge<TNode> aris)
		{
			throw new NotImplementedException ();
		}

		/// <summary>
		/// Adds a new color.
		/// </summary>
		/// <param name="color">Color.</param>
		/// <param name="graph">Graph mdeling this color.</param>
		public void AgregaColor (TColor color, IGraph<TNode> graph)
		{
			if (_colorAssign.ContainsKey (color))
				throw new DuplicatedColorException (color.ToString ());
			_colorAssign.Add (color, graph);
		}

		/// <summary>
		/// Gets the graph assigned to the specified color.
		/// </summary>
		public IGraph<TNode> GetGraph (TColor color)
		{
			if (_colorAssign.TryGetValue (color, out IGraph<TNode> ret))
				return ret;
			throw new Exception (string.Format ("Color {0} does not exists.", color));
		}

		/// <summary>
		/// Gets the neighborhood of a specified node with a specified color.
		/// </summary>
		public ICollection<TNode> Neighborhood (TNode nodo, TColor color)
		{
			return _colorAssign.TryGetValue (color, out IGraph<TNode> graf) ? graf.Neighborhood (nodo) : new TNode[0];
		}

		IEnumerable<IEdge<TNode>> IGraph<TNode>.Edges ()
		{
			throw new NotImplementedException ();
		}

		bool EdgeExists (TNode desde, TNode hasta) => _colorAssign.Any (z => z.Value[desde, hasta].Exists);

		int IGraph<TNode>.EdgeCount ()
		{
			throw new NotImplementedException ();
		}

		/// <summary>
		/// Color assignation.
		/// </summary>
		readonly Dictionary<TColor, IGraph<TNode>> _colorAssign = new Dictionary<TColor, IGraph<TNode>> ();
	}
}